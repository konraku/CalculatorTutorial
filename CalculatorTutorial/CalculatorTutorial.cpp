//#include ステートメントを使用すると、他のファイル内のコードを参照できます
#include <iostream>
#include "Calculator.h"

//using namespace std; 行は、このファイルに C++ 標準ライブラリの内容が使用されることを想定するようにコンパイラに指示します。
//この行がないと、ライブラリの各キーワードの前に std:: を付けて、そのスコープを示す必要があります。
//std::cout
using namespace std;

//すべての C++ アプリケーションには main() 関数を含める必要があります。 
//この関数は、プログラムが最初に実行するものです。 使用するには、すべてのコードが main() からアクセスできる必要があります
int main()
{
    //cout キーワードは、C++ の標準出力に出力するために使用されています。 << 演算子は、その右側にあるものはすべて標準出力に送信するようにコンパイラに指示
    cout << "電卓\n";

    //初期値
    double x = 0.0;
    double y = 0.0;
    double result = 0.0;
    char oper = '+';

    std::cout << "Please enter the operation to perform.Format: a + b | a - b | a * b | a / b \n";

    //Calculator c; 行は、Calculator クラスのインスタンスとして 'c' というオブジェクトを宣言しています。
    Calculator c;
    while (true)
    {
        //cin キーワードは、ユーザーからの入力を受け付けるために使用されます
        cin >> x >> oper >> y;
        if (oper=='/' && y==0)
        {
            cout << "Attempted to divide by zero!\n";
            continue;
        }
        else
        {
            result = c.Calculate(x, oper, y);
        }
        cout << "Result " << "of " << x << oper << y << " is: " << result << "\n";
    };

    return 0;
}

// プログラムの実行: Ctrl + F5 または [デバッグ] > [デバッグなしで開始] メニュー
// プログラムのデバッグ: F5 または [デバッグ] > [デバッグの開始] メニュー

// 作業を開始するためのヒント: 
//    1. ソリューション エクスプローラー ウィンドウを使用してファイルを追加/管理します 
//   2. チーム エクスプローラー ウィンドウを使用してソース管理に接続します
//   3. 出力ウィンドウを使用して、ビルド出力とその他のメッセージを表示します
//   4. エラー一覧ウィンドウを使用してエラーを表示します
//   5. [プロジェクト] > [新しい項目の追加] と移動して新しいコード ファイルを作成するか、[プロジェクト] > [既存の項目の追加] と移動して既存のコード ファイルをプロジェクトに追加します
//   6. 後ほどこのプロジェクトを再び開く場合、[ファイル] > [開く] > [プロジェクト] と移動して .sln ファイルを選択します
